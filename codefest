import os
import random
import math
import pygame
from pygame.locals import *
from os import listdir
from os.path import isfile, join
pygame.init()

pygame.display.set_caption("Platformer game")

#setup constant variables
FPS = 60
WIDTH, HEIGHT = 1000, 800
WINDOW = pygame.display.set_mode((WIDTH, HEIGHT))

main_menu = True
run = True

#load images
start_img = pygame.image.load('img/start_btn.png')
exit_img = pygame.image.load('img/exit_btn.png')
bg2_img = pygame.image.load('img/sky.png')

start_button = pygame.transform.scale(start_img, (200, 100))
quit_button = pygame.transform.scale(exit_img, (200, 100))

def get_block(size):
  path = join("assets", "Terrain", "Terrain.png")
  image = pygame.image.load(path).convert_alpha()
  surface = pygame.Surface((size, size), pygame.SRCALPHA, 32)
  rect = pygame.Rect(96, 0, size, size)
  surface.blit(image, (0, 0), rect)
  return pygame.transform.scale2x(surface)

class Button():
  def __init__(self, x, y, image):
    self.image = image
    self.rect = self.image.get_rect()
    self.rect.x = x
    self.rect.y = y
    self.clicked = False

  def draw(self):
    action = False

    #get mouse position
    pos = pygame.mouse.get_pos()

    #check mouseover and clicked conditions
    if self.rect.collidepoint(pos):
      if pygame.mouse.get_pressed()[0] == 1 and self.clicked is False:
        action = True
        self.clicked = True

    if pygame.mouse.get_pressed()[0] == 0:
      self.clicked = False


    #draw button
    screen.blit(self.image, self.rect)

    return action


class Object(pygame.sprite.Sprite):
  def __init__(self, x, y, width, height, name=None):
    super().__init__()
    self.rect = pygame.Rect(x, y, width, height)
    self.image = pygame.Surface((width, height), pygame.SRCALPHA)
    self.width = width
    self.height = height
    self.name = name

def draw(self, win, offset_x):
    win.blit(self.image, (self.rect.x - offset_x, self.rect.y))


class Block(Object):
  def __init__(self, x, y, size):
      super().__init__(x, y, size, size)
      block = get_block(size)
      self.image.blit(block, (0, 0))
      self.mask = pygame.mask.from_surface(self.image)

class Fire(Object):
  ANIMATION_DELAY = 3

  def __init__(self, x, y, width, height):
      super().__init__(x, y, width, height, "fire")
      self.fire = load_sprite_sheets("Traps", "Fire", width, height)
      self.image = self.fire["off"][0]
      self.mask = pygame.mask.from_surface(self.image)
      self.animation_count = 0
      self.animation_name = "off"

  def on(self):
      self.animation_name = "on"

  def off(self):
      self.animation_name = "off"

  def loop(self):
      sprites = self.fire[self.animation_name]
      sprite_index = (self.animation_count //
                      self.ANIMATION_DELAY) % len(sprites)
      self.image = sprites[sprite_index]
      self.animation_count += 1

      self.rect = self.image.get_rect(topleft=(self.rect.x, self.rect.y))
      self.mask = pygame.mask.from_surface(self.image)
      if self.animation_count // self.ANIMATION_DELAY > len(sprites):
          self.animation_count = 0

class Fpla(Object):
  ANIMATION_DELAY = 3

  def __init__(self, x, y, width, height):
      super().__init__(x, y, width, height, "fpla")
      self.fpla = load_sprite_sheets("Traps", "Fpla", width, height)
      self.image = self.fpla["Off"][0]
      self.mask = pygame.mask.from_surface(self.image)
      self.animation_count = 0
      self.animation_name = "Off"

  def On(self):
      self.animation_name = "On"

  def Off(self):
      self.animation_name = "Off"

  def loop(self):
      sprites = self.fpla[self.animation_name]
      sprite_index = (self.animation_count //
                      self.ANIMATION_DELAY) % len(sprites)
      self.image = sprites[sprite_index]
      self.animation_count += 1

      self.rect = self.image.get_rect(topleft=(self.rect.x, self.rect.y))
      self.mask = pygame.mask.from_surface(self.image)

      if self.animation_count // self.ANIMATION_DELAY > len(sprites):
          self.animation_count = 0

def handle_move(player, objects):
  keys = pygame.key.get_pressed()

  player.x_vel = 0
  collide_left = collide(player, objects, -PLAYER_VEL * 2)
  collide_right = collide(player, objects, PLAYER_VEL * 2)

  if keys[pygame.K_LEFT] and not collide_left:
      player.move_left(PLAYER_VEL)
  if keys[pygame.K_RIGHT] and not collide_right:
      player.move_right(PLAYER_VEL)

  vertical_collide = handle_vertical_collision(player, objects, player.y_vel)
  to_check = [collide_left, collide_right, *vertical_collide]

  for obj in to_check:
      if obj and obj.name == "fire":
          player.make_hit()
  for obj in to_check:
      if obj and obj.name == "fpla":
          player.make_hit()








def draw():
  pass

def main():
  global main_menu
  clock = pygame.time.Clock()
  run = True
  while run:
    clock.tick(FPS)
    for event in pygame.event.get():
      if event.type == pygame.QUIT:
        run = False
        pygame.quit()
    if run:
      draw()



if __name__ == "__main__":
  main()

def main():
  global main_menu
  clock = pygame.time.Clock()
  run = True
  while run:
    clock.tick(FPS)
    for event in pygame.event.get():
      if event.type == pygame.QUIT:
        run = False
        pygame.quit()
    if run:
      draw()
